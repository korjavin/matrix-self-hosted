name: Build Images and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile*'
      - 'homeserver.yaml'
      - 'log.config' 
      - 'element-config.json'
      - 'nginx.conf'
      - 'init-synapse.sh'
      - 'docker-compose.yml'
      - '.github/workflows/build-and-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  SYNAPSE_IMAGE_NAME: korjavin/matrix-self-hosted/synapse
  ELEMENT_IMAGE_NAME: korjavin/matrix-self-hosted/element

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate short SHA
        id: sha
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Synapse
        id: synapse-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.SYNAPSE_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.sha.outputs.SHORT_SHA }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Element  
        id: element-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ELEMENT_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.sha.outputs.SHORT_SHA }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Synapse image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.synapse-meta.outputs.tags }}
          labels: ${{ steps.synapse-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Element image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.element
          push: true
          tags: ${{ steps.element-meta.outputs.tags }}
          labels: ${{ steps.element-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update docker-compose.yml with current SHA
        run: |
          # Create a version of docker-compose.yml with the current SHA
          sed "s/\${IMAGE_TAG:-latest}/${{ steps.sha.outputs.SHORT_SHA }}/g" docker-compose.yml > docker-compose.prod.yml
          
          echo "Updated docker-compose.prod.yml with IMAGE_TAG=${{ steps.sha.outputs.SHORT_SHA }}"

      - name: Validate production configuration
        run: |
          # Validate the production docker-compose file
          docker compose -f docker-compose.prod.yml config -q
          echo "‚úÖ Production configuration validated"

      - name: Update deployment branch
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Create or checkout deploy branch  
          git checkout -B deploy
          
          # Replace docker-compose.yml with the production version
          mv docker-compose.prod.yml docker-compose.yml
          
          # Create .env file with IMAGE_TAG
          echo "IMAGE_TAG=${{ steps.sha.outputs.SHORT_SHA }}" > .env.example
          
          # Add changes
          git add docker-compose.yml .env.example
          git commit -m "ci: Deploy with images tagged ${{ steps.sha.outputs.SHORT_SHA }} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
          
          # Push to deploy branch
          git push origin deploy --force

      - name: Trigger Portainer Redeploy Webhook
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: ${{ secrets.PORTAINER_REDEPLOY_HOOK }}
          webhook_secret: "trigger"
        continue-on-error: true

      - name: Deployment Summary
        env:
          PORTAINER_REDEPLOY_HOOK: ${{ secrets.PORTAINER_REDEPLOY_HOOK }}
        run: |
          echo "üöÄ Build and deployment completed successfully!"
          echo "üì¶ Synapse image: ${{ env.REGISTRY }}/${{ env.SYNAPSE_IMAGE_NAME }}:${{ steps.sha.outputs.SHORT_SHA }}"
          echo "üì¶ Element image: ${{ env.REGISTRY }}/${{ env.ELEMENT_IMAGE_NAME }}:${{ steps.sha.outputs.SHORT_SHA }}"
          echo "üè∑Ô∏è  Image tag: ${{ steps.sha.outputs.SHORT_SHA }}"
          echo "üìù Deploy branch updated with production configuration"
          if [ -n "$PORTAINER_REDEPLOY_HOOK" ]; then
            echo "üîÑ Portainer webhook triggered"
          else
            echo "‚ö†Ô∏è  Portainer webhook not configured"
          fi