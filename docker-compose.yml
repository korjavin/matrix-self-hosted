services:
  synapse-init:
    image: matrixdotorg/synapse:latest
    container_name: matrix-synapse-init
    environment:
      - MATRIX_DOMAIN=${MATRIX_DOMAIN:-matrix.example.com}
      - ELEMENT_DOMAIN=${ELEMENT_DOMAIN:-element.example.com}
      - POSTGRES_USER=${POSTGRES_USER:-synapse}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme123}
      - POSTGRES_DB=${POSTGRES_DB:-synapse}
      - REGISTRATION_SHARED_SECRET=${REGISTRATION_SHARED_SECRET:-}
      - TURN_SHARED_SECRET=${TURN_SHARED_SECRET:-}
    volumes:
      - synapse_data:/data
      - ./homeserver.yaml:/tmp/homeserver.yaml:ro
      - ./log.config:/tmp/log.config:ro
    networks:
      - matrix-network
    entrypoint: /bin/bash
    command: >
      -c "
        echo 'Initializing Matrix Synapse configuration...' &&
        MATRIX_DOMAIN=$${MATRIX_DOMAIN:-matrix.example.com} &&
        ELEMENT_DOMAIN=$${ELEMENT_DOMAIN:-element.example.com} &&
        POSTGRES_USER=$${POSTGRES_USER:-synapse} &&
        POSTGRES_PASSWORD=$${POSTGRES_PASSWORD:-changeme123} &&
        POSTGRES_DB=$${POSTGRES_DB:-synapse} &&
        REGISTRATION_SHARED_SECRET=$${REGISTRATION_SHARED_SECRET:-$(openssl rand -hex 32)} &&
        TURN_SHARED_SECRET=$${TURN_SHARED_SECRET:-$(openssl rand -hex 32)} &&
        mkdir -p /data &&
        cp /tmp/homeserver.yaml /data/homeserver.yaml &&
        cp /tmp/log.config /data/$$MATRIX_DOMAIN.log.config &&
        sed -i 's/MATRIX_DOMAIN_PLACEHOLDER/'$$MATRIX_DOMAIN'/g' /data/homeserver.yaml &&
        sed -i 's/ELEMENT_DOMAIN_PLACEHOLDER/'$$ELEMENT_DOMAIN'/g' /data/homeserver.yaml &&
        sed -i 's/POSTGRES_USER_PLACEHOLDER/'$$POSTGRES_USER'/g' /data/homeserver.yaml &&
        sed -i 's/POSTGRES_PASSWORD_PLACEHOLDER/'$$POSTGRES_PASSWORD'/g' /data/homeserver.yaml &&
        sed -i 's/POSTGRES_DB_PLACEHOLDER/'$$POSTGRES_DB'/g' /data/homeserver.yaml &&
        sed -i 's/REGISTRATION_SHARED_SECRET_PLACEHOLDER/'$$REGISTRATION_SHARED_SECRET'/g' /data/homeserver.yaml &&
        sed -i 's/TURN_SHARED_SECRET_PLACEHOLDER/'$$TURN_SHARED_SECRET'/g' /data/homeserver.yaml &&
        if [ ! -f \"/data/$$MATRIX_DOMAIN.signing.key\" ]; then
          echo 'Generating signing key...' &&
          python -m synapse.app.homeserver --generate-keys --config-path /data/homeserver.yaml
        fi &&
        echo 'Configuration completed successfully!'
      "
    restart: "no"

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: matrix-synapse
    environment:
      - UID=991
      - GID=991
    volumes:
      - synapse_data:/data
    networks:
      - matrix-network
    command: ["run", "--config-path", "/data/homeserver.yaml"]
    depends_on:
      synapse-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.matrix-synapse.rule=Host(`${MATRIX_DOMAIN:-matrix.example.com}`)"
      - "traefik.http.routers.matrix-synapse.entrypoints=websecure"
      - "traefik.http.routers.matrix-synapse.tls.certresolver=myresolver"
      - "traefik.http.services.matrix-synapse.loadbalancer.server.port=8008"
      # Matrix federation
      - "traefik.http.routers.matrix-federation.rule=Host(`${MATRIX_DOMAIN:-matrix.example.com}`) && Path(`/_matrix/`)"
      - "traefik.http.routers.matrix-federation.entrypoints=websecure"
      - "traefik.http.routers.matrix-federation.tls.certresolver=myresolver"
      - "traefik.http.routers.matrix-federation.service=matrix-federation"
      - "traefik.http.services.matrix-federation.loadbalancer.server.port=8448"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fSs http://localhost:8008/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: matrix-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-synapse}
      - POSTGRES_USER=${POSTGRES_USER:-synapse}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - matrix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-synapse} -d ${POSTGRES_DB:-synapse}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: matrix-redis
    volumes:
      - redis_data:/data
    networks:
      - matrix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  element:
    image: vectorim/element-web:latest
    container_name: matrix-element
    volumes:
      - ./element-config.json:/app/config.json:ro
    networks:
      - matrix-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.matrix-element.rule=Host(`${ELEMENT_DOMAIN:-element.example.com}`)"
      - "traefik.http.routers.matrix-element.entrypoints=websecure"
      - "traefik.http.routers.matrix-element.tls.certresolver=myresolver"
      - "traefik.http.services.matrix-element.loadbalancer.server.port=80"
    restart: unless-stopped
    depends_on:
      synapse:
        condition: service_healthy

volumes:
  synapse_data:
    name: matrix_synapse_data
  postgres_data:
    name: matrix_postgres_data
  redis_data:
    name: matrix_redis_data

networks:
  matrix-network:
    name: ${NETWORK_NAME:-matrix-network}
    external: ${NETWORK_EXTERNAL:-true}